{"version":3,"sources":["App.js","serviceWorker.js","index.js","firebaseConfig.js","logo.svg"],"names":["App","props","loginFB","window","FB","login","response","status","console","log","scope","getLoginStatus","this","statusChangeCallback","bind","logoutFB","logout","share","ui","method","href","handleClick","fbAsyncInit","init","appId","cookie","xfbml","version","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","api","name","credential","firebase","auth","FacebookAuthProvider","authResponse","accessToken","signInWithCredential","then","info","catch","error","code","setState","isHaveAccount","testAPI","checkLoginState","className","logo","alt","type","onClick","Component","Boolean","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","measurementId","analytics","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.8d9685a1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Button } from \"antd\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    window.fbAsyncInit = function() {\n      window.FB.init({\n        appId: \"206943097080175\",\n        cookie: true, // enable cookies to allow the server to access\n        // the session\n        xfbml: true, // parse social plugins on this page\n        version: \"v6.0\" // use version 2.1\n      });\n\n      // Now that we've initialized the JavaScript SDK, we call\n      // FB.getLoginStatus().  This function gets the state of the\n      // person visiting this page and can return one of three states to\n      // the callback you provide.  They can be:\n      //\n      // 1. Logged into your app ('connected')\n      // 2. Logged into Facebook, but not your app ('not_authorized')\n      // 3. Not logged into Facebook and can't tell if they are logged into\n      //    your app or not.\n      //\n      // These three cases are handled in the callback function.\n      window.FB.getLoginStatus(\n        function(response) {\n          this.statusChangeCallback(response);\n        }.bind(this)\n      );\n    }.bind(this);\n\n    // Load the SDK asynchronously\n    (function(d, s, id) {\n      var js,\n        fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) return;\n      js = d.createElement(s);\n      js.id = id;\n      js.src = \"//connect.facebook.net/en_US/sdk.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    })(document, \"script\", \"facebook-jssdk\");\n  }\n\n  // Here we run a very simple test of the Graph API after login is\n  // successful.  See statusChangeCallback() for when this call is made.\n  testAPI() {\n    console.log(\"Welcome!  Fetching your information.... \");\n    window.FB.api(\"/me\", function(response) {\n      console.log(\"Successful login for: \" + response.name);\n    });\n  }\n\n  // This is called with the results from from FB.getLoginStatus().\n  statusChangeCallback(response) {\n    console.log(\"statusChangeCallback\");\n    console.log(response);\n    // The response object is returned with a status field that lets the\n    // app know the current login status of the person.\n    // Full docs on the response object can be found in the documentation\n    // for FB.getLoginStatus().\n    if (response.status === \"connected\") {\n      // Logged into your app and Facebook.\n      const credential = firebase.auth.FacebookAuthProvider.credential(\n        response.authResponse.accessToken\n      );\n      firebase\n        .auth()\n        .signInWithCredential(credential)\n        .then(response => console.info(\"firebase response\", response))\n        .catch(error => {\n          if (error.code === \"auth/account-exists-with-different-credential\")\n            this.setState({ isHaveAccount: true });\n        });\n      this.testAPI();\n    } else if (response.status === \"not_authorized\") {\n      // The person is logged into Facebook, but not your app.\n      console.log(\"not authorized\");\n    } else {\n      // The person is not logged into Facebook, so we're not sure if\n      // they are logged into this app or not.\n      console.info(\"error\", response);\n    }\n  }\n\n  // This function is called when someone finishes with the Login\n  // Button.  See the onlogin handler attached to it in the sample\n  // code below.\n  checkLoginState() {\n    window.FB.getLoginStatus(\n      function(response) {\n        this.statusChangeCallback(response);\n      }.bind(this)\n    );\n  }\n\n  handleClick() {\n    window.FB.login(this.checkLoginState());\n  }\n\n  loginFB = () => {\n    window.FB.login(\n      function(response) {\n        if (response.status === \"connected\") {\n          console.log(response);\n        } else {\n          console.log(response);\n          // The person is not logged into your webpage or we are unable to tell.\n        }\n        // handle the response\n      },\n      { scope: \"public_profile,email\" }\n    );\n    window.FB.getLoginStatus(\n      function(response) {\n        this.statusChangeCallback(response);\n      }.bind(this)\n    );\n    // window.FB.login(this.checkLoginState());\n  };\n\n  logoutFB = () => {\n    window.FB.logout(function(response) {\n      console.log(response);\n    });\n  };\n\n  share = () => {\n    window.FB.ui(\n      {\n        method: \"share\",\n        href: \"https://www.google.com\"\n      },\n      function(response) {\n        console.log(response);\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Welcome to React</h2>\n          <p className=\"App-intro\">\n            To get started, edit <code>src/App.js</code> and save to reload.\n          </p>\n          <Button type=\"primary\" onClick={() => this.loginFB()}>\n            Login\n          </Button>\n          <Button type=\"primary\" onClick={() => this.loginFB()}>\n            Logout\n          </Button>\n          <Button type=\"primary\" onClick={() => this.share()}>\n            Share\n          </Button>\n          {/* <FacebookShareButton\n            quote=\"Share\"\n            hashtag=\"#\"\n            onClick={() => console.log(\"click\")}\n          /> */}\n          {/* <fb:login-button\n            scope=\"public_profile,email\"\n            onlogin=\"checkLoginState();\"\n          ></fb:login-button> */}\n        </div>\n        {/* <div id=\"status\"></div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport firebase from \"firebase\";\nimport { firebaseConfig } from \"./firebaseConfig\";\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const firebaseConfig = {\r\n  apiKey: \"AIzaSyCIbYZAKvEmY9ns42xafyV54BFU6qUCmKI\",\r\n  authDomain: \"dau-giau.firebaseapp.com\",\r\n  databaseURL: \"https://dau-giau.firebaseio.com\",\r\n  projectId: \"dau-giau\",\r\n  storageBucket: \"dau-giau.appspot.com\",\r\n  messagingSenderId: \"801715659405\",\r\n  appId: \"1:801715659405:web:cb3eecc4840cd11abaf8c4\",\r\n  measurementId: \"G-XCRXMT5JYZ\"\r\n};\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}